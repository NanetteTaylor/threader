{"version":3,"sources":["components/Main.js","components/Landing.js","App.js","index.js"],"names":["Main","props","state","uid","status","story","replyID","profile","window","document","cookie","split","this","setState","fetch","then","res","json","catch","error","console","log","event","target","value","tweet","method","headers","body","JSON","stringify","response","id_str","length","push","storyArray","fullWord","word","substring","preventDefault","breakDownStory","thread","className","src","profile_image","alt","username","handle","followers","friends","user_description","onChange","handleInput","placeholder","rows","onClick","handleOnClick","React","Component","Landing","href","App","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0fdaf7c4.chunk.js","sourcesContent":["import React from 'react';\nimport './main.css';\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      uid: null,\n      status: null,\n      story: [],\n      replyID: null, // The ID of the tweet to reply to. This is how a thread is created. You need to reply to the tweet to create a thread\n      profile: {}\n    };\n  }\n\n  // fetches current user's profile data and saves it to the states\n  componentDidMount() {\n      let uid = window.document.cookie.split('=')[1];\n      this.setState({uid: uid});\n    fetch(`/api/twitter-profile/${uid}`)\n      .then(res => res.json())\n      .then(json => {\n        // upon success, update tasks\n        this.setState({ profile: json });\n        // console.log(this.state.tasks);\n      })\n      .catch(error => {\n        // upon failure, show error message\n        console.log(error);\n      });\n  }\n\n  // saves user input to 'status' in state\n  handleInput(event){\n    this.setState({status: event.target.value});\n  }\n\n  // loops through the 'story' array in state and posts each status in a thread\n  async thread(){\n      let uid = window.document.cookie.split('=')[1];\n      console.log(uid);\n    for(let tweet of this.state.story){\n      let response = await fetch(`/api/tweet/${this.state.uid}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // The 'replyID' is the tweet this status is replying to. When left empty, it doesn't reply to any tweet. It posts the status on its own\n        body: JSON.stringify({ status: tweet, replyID: this.state.replyID })\n      });\n\n      let json = await response.json();\n      this.setState({ replyID: json.id_str});\n    }\n  }\n\n  // breaks down a user story into tweets, Each tweet is 280 characters or less\n  breakDownStory(){\n    console.log(`Story array in state is ${this.state.story}`);\n    if (this.state.status.length <= 280){\n      this.state.story.push(this.state.status);\n    }else{\n      let storyArray = this.state.status.split(' ');\n      console.log(storyArray);\n      let tweet = '';\n      let fullWord = false;\n      for(let word of storyArray){\n        if((tweet.length + word.length) <= 280){\n          tweet += word + ' ';\n        }else{\n          fullWord = true;\n        }\n        if(fullWord){\n          // console.log(`Finished a full tweet with length ${tweet.length}`);\n          this.state.story.push(tweet.substring(0, tweet.length-1));\n          tweet = word + ' ';\n          fullWord = false;\n        }\n      }\n      this.state.story.push(tweet.substring(0, tweet.length-1));\n    }\n    // console.log(`Story array in state AFTER is ${this.state.story}`);\n  }\n\n  handleOnClick(event){\n    event.preventDefault();\n    this.setState({story: []});\n    this.breakDownStory();\n    this.thread();\n  }\n\n  render(){\n    return (\n      <div className='threader'>\n        <h1>Threader</h1>\n        <p>An app for writing beautiful stories as Twitter threads</p>\n        <div className='main'>\n          <div className='profile'>\n            <img src={this.state.profile.profile_image} alt={this.state.profile.username}/>\n            <h2>{`@${this.state.profile.handle}`}</h2>\n            <h3>{`Followers: ${this.state.profile.followers} Following: ${this.state.profile.friends}`}</h3>\n            <h4>{this.state.profile.user_description}</h4>\n          </div>\n          <div className='threader-input'>\n            <h3>Hello {this.state.profile.username}, you can type your story here</h3>\n            <textarea onChange={(event)=> this.handleInput(event)} placeholder='Your twitter thread' rows='8'/>\n            <div className='button'><button onClick={(event)=> this.handleOnClick(event)} >Tweet</button></div>\n            {/* <p>{this.state.replyID}</p> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './landing.css';\n\nclass Landing extends React.Component{\n    render() {\n        return(\n            <div className='main-section position-relative overflow-hidden p-3 p-md-5 m-md-3 landing'>\n                <div className='container d-flex flex-column'>\n                    <div className='row my-auto'>\n                        <div className='col-lg-6 col-md-6 col-sm-12 pt-16 pt-lg-6 my-auto'>\n                            <h1>Threader</h1>\n                            <h3>An app for writing beautiful stories as twitter threads</h3>\n                            <a href='http://127.0.0.1:5000/twitter-login' className='btn btn-lg btn-primary'>Login With Twitter</a>\n                        </div>\n                        <div className=\"col-lg-6 col-md-12 col-sm-12 ml-auto my-auto\">\n                            <img alt=\"Illustration\" src=\"./images/writing-00.svg\"/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Landing;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Main from './components/Main';\nimport Landing from \"./components/Landing\";\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {}\n    }\n\n    render(){\n        return (\n            <Router>\n                <Switch>\n                    <Route path='/main'>\n                        <Main/>\n                    </Route>\n                    <Route path='/'>\n                        <Landing/>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}