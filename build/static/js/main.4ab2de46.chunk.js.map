{"version":3,"sources":["components/Main.js","components/Landing.js","App.js","index.js"],"names":["Main","props","state","uid","status","story","replyID","profile","window","document","cookie","split","this","setState","fetch","then","res","json","catch","error","console","log","event","target","value","tweet","method","headers","body","JSON","stringify","response","id_str","location","href","handle","length","push","storyArray","fullWord","word","substring","preventDefault","breakDownStory","thread","className","src","profile_image","alt","username","followers","friends","user_description","onChange","handleInput","placeholder","rows","onClick","handleOnClick","React","Component","Landing","App","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4ab2de46.chunk.js","sourcesContent":["import React from 'react';\nimport './main.css';\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      uid: null,\n      status: null,\n      story: [],\n      replyID: null, // The ID of the tweet to reply to. This is how a thread is created. You need to reply to the tweet to create a thread\n      profile: {}\n    };\n  }\n\n  // fetches current user's profile data and saves it to the states\n  componentDidMount() {\n      let uid = window.document.cookie.split('=')[1];\n      this.setState({uid: uid});\n    fetch(`/api/twitter-profile/${uid}`)\n      .then(res => res.json())\n      .then(json => {\n        // upon success, update tasks\n        this.setState({ profile: json });\n        // console.log(this.state.tasks);\n      })\n      .catch(error => {\n        // upon failure, show error message\n        console.log(error);\n      });\n  }\n\n  // saves user input to 'status' in state\n  handleInput(event){\n    this.setState({status: event.target.value});\n  }\n\n  // loops through the 'story' array in state and posts each status in a thread\n  async thread(){\n    let uid = window.document.cookie.split('=')[1];\n    console.log(uid);\n    for(let tweet of this.state.story){\n      let response = await fetch(`/api/tweet/${this.state.uid}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // The 'replyID' is the tweet this status is replying to. When left empty, it doesn't reply to any tweet. It posts the status on its own\n        body: JSON.stringify({ status: tweet, replyID: this.state.replyID })\n      });\n\n      let json = await response.json();\n      this.setState({ replyID: json.id_str});\n    }\n    window.location.href = `https://twitter.com/${this.state.profile.handle}`;\n  }\n\n  // breaks down a user story into tweets, Each tweet is 280 characters or less\n  breakDownStory(){\n    console.log(`Story array in state is ${this.state.story}`);\n    if (this.state.status.length <= 280){\n      this.state.story.push(this.state.status);\n    }else{\n      let storyArray = this.state.status.split(' ');\n      console.log(storyArray);\n      let tweet = '';\n      let fullWord = false;\n      for(let word of storyArray){\n        if((tweet.length + word.length) <= 280){\n          tweet += word + ' ';\n        }else{\n          fullWord = true;\n        }\n        if(fullWord){\n          // console.log(`Finished a full tweet with length ${tweet.length}`);\n          this.state.story.push(tweet.substring(0, tweet.length-1));\n          tweet = word + ' ';\n          fullWord = false;\n        }\n      }\n      this.state.story.push(tweet.substring(0, tweet.length-1));\n    }\n    // console.log(`Story array in state AFTER is ${this.state.story}`);\n  }\n\n  handleOnClick(event){\n    event.preventDefault();\n    this.setState({story: []});\n    this.breakDownStory();\n    this.thread();\n  }\n\n  render(){\n    return (\n      <div className='threader'>\n        <h1>Threader</h1>\n        <p>An app for writing beautiful stories as Twitter threads</p>\n        <div className='main'>\n          <div className='profile'>\n            <img src={this.state.profile.profile_image} alt={this.state.profile.username}/>\n            <h2>{`@${this.state.profile.handle}`}</h2>\n            <h3>{`Followers: ${this.state.profile.followers} Following: ${this.state.profile.friends}`}</h3>\n            <h4>{this.state.profile.user_description}</h4>\n          </div>\n          <div className='threader-input'>\n            <h3>Hello {this.state.profile.username}, you can type your story here</h3>\n            <textarea onChange={(event)=> this.handleInput(event)} placeholder='Your twitter thread' rows='8'/>\n            <div className='button'><button onClick={(event)=> this.handleOnClick(event)} >Tweet</button></div>\n            {/* <p>{this.state.replyID}</p> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './landing.css';\n\nclass Landing extends React.Component{\n    render() {\n        return(\n            <div className='main-section position-relative overflow-hidden p-3 p-md-5 m-md-3 landing'>\n                <div className='container d-flex flex-column'>\n                    <div className='row my-auto'>\n                        <div className='col-lg-6 col-md-6 col-sm-12 pt-16 pt-lg-6 my-auto'>\n                            <h1>Threader</h1>\n                            <h3>An app for writing beautiful stories as twitter threads</h3>\n                            <a href='/twitter-login' className='btn btn-lg btn-primary'>Login With Twitter</a>\n                        </div>\n                        <div className=\"col-lg-6 col-md-12 col-sm-12 ml-auto my-auto\">\n                            <img alt=\"Illustration\" src=\"./images/writing-00.svg\"/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Landing;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Main from './components/Main';\nimport Landing from \"./components/Landing\";\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {}\n    }\n\n    render(){\n        return (\n            <Router>\n                <Switch>\n                    <Route path='/main'>\n                        <Main/>\n                    </Route>\n                    <Route path='/'>\n                        <Landing/>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}